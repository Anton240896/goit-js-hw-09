{"mappings":"AA6CaA,SAASC,cAAc,SAE/BC,iBAAiB,UACtB,SAAuBC,GACrBA,EAAIC,iBAEJ,MAAMC,EAASC,OAAOH,EAAII,cAAcC,SAASH,OAAOI,OAClDC,EAAOJ,OAAOH,EAAII,cAAcC,SAASE,KAAKD,OAC9CE,EAAQL,OAAOH,EAAII,cAAcC,SAASI,MAAMH,OAEtD,IAAK,IAAII,EAAI,EAAGA,GAAKR,EAAQQ,GAAG,EAClCC,YAAW,KAeX,IAAuBC,EAAUH,GAAVG,EAbPF,EAaiBD,EAbfD,EAcT,IAAIK,SAAQ,CAACC,EAAIC,KAEtB,MAAMC,EAAgBC,KAAKC,SAAW,GAClCF,EACFF,EAAI,C,SAAEF,E,MAAUH,IAGlBM,EAAI,C,SAACH,E,MAASH,GAAO,KApBtBU,MAAK,EAACP,SAAEA,EAAQH,MAAEA,MACjBW,OAAOC,QAAQ,uBAAqBT,QAAiBH,MAAU,IAEhEa,OAAM,EAACV,SAAEA,EAAQH,MAAEA,MACfW,OAAOG,QAAQ,sBAAoBX,QAAeH,MAAU,IAEjED,GAASD,CAAI,GACbC,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const elem = {\n//   form: document.querySelector('.form'),\n//   input_delay: document.querySelector('input[name=\"delay\"]'),\n//   input_step: document.querySelector('input[name=\"step\"]'),\n//   input_amount: document.querySelector('input[name=\"amount\"]')\n// };\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//         resolve({ position, delay });\n//       } \n//       else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n//  }\n\n\n//   elem.form.addEventListener('click', promiseCreate);\n// function promiseCreate(evt) {\n//   evt.preventDefault();\n\n//   let delayValue = Number(elem.input_delay.value);\n//   let stepValue = Number(elem.input_step.value);\n//   let amountValue = Number(elem.input_amount.value);\n\n//   for (let i = 1; i <= amountValue; i += 1) {\n\n//     createPromise(i, delayValue + stepValue * (i - 1))  \n//         .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// }\n\n\nconst form = document.querySelector('.form');\n \nform.addEventListener('submit', handlerSubmit);\nfunction handlerSubmit(evt) {\n  evt.preventDefault();\n\n  const amount = Number(evt.currentTarget.elements.amount.value);\n  const step = Number(evt.currentTarget.elements.step.value);\n  const delay = Number(evt.currentTarget.elements.delay.value);\n\n  for (let i = 1; i <= amount; i+=1) {\nsetTimeout(() => {\n\n  createPromise(i,delay)\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n});\n  delay += step;\n},delay);\n}\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((res,rej) => {\n\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      res({ position, delay})\n  }\n  else {\n    rej({position,delay})\n  }\n});\n}"],"names":["document","querySelector","addEventListener","evt","preventDefault","amount","Number","currentTarget","elements","value","step","delay1","delay","i","setTimeout","position","Promise","res","rej","shouldResolve","Math","random","then","Notify","success","catch","failure"],"version":3,"file":"03-promises.31f0a4bc.js.map"}