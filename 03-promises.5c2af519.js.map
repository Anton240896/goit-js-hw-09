{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,SAC7BC,YAAaF,SAASC,cAAc,uBACpCE,WAAYH,SAASC,cAAc,sBACnCG,aAAcJ,SAASC,cAAc,yBAGvC,SAASI,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACWC,KAAKC,SAAW,GAElCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAKLT,EAAKC,KAAKe,iBAAiB,SAC7B,SAAuBC,GACrBA,EAAIC,iBAMJ,IAJA,IAAIC,EAAaC,OAAOpB,EAAKI,YAAYiB,OACrCC,EAAYF,OAAOpB,EAAKK,WAAWgB,OACnCE,EAAcH,OAAOpB,EAAKM,aAAae,OAElCG,EAAI,EAAGA,GAAKD,EAAaC,GAAK,EAErCjB,EAAciB,EAAGL,EAAaG,GAAaE,EAAI,IAC1CC,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACnBX,EAAA6B,OAAOC,QAAQ,uBAAwCC,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M,IAE9DqB,OAAM,SAAAJ,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBX,EAAA6B,OAAOI,QAAQ,sBAAuCF,OAAfrB,EAAS,QAAYqB,OAANpB,EAAM,M","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst elem = {\n  form: document.querySelector('.form'),\n  input_delay: document.querySelector('input[name=\"delay\"]'),\n  input_step: document.querySelector('input[name=\"step\"]'),\n  input_amount: document.querySelector('input[name=\"amount\"]')\n};\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n        resolve({ position, delay });\n      } \n      else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n }\n\n\n  elem.form.addEventListener('click', promiseCreate);\nfunction promiseCreate(evt) {\n  evt.preventDefault();\n\n  let delayValue = Number(elem.input_delay.value);\n  let stepValue = Number(elem.input_step.value);\n  let amountValue = Number(elem.input_amount.value);\n\n  for (let i = 1; i <= amountValue; i += 1) {\n\n    createPromise(i, delayValue + stepValue * (i - 1))  \n        .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  }\n}\n\n\n// const form = document.querySelector('.form');\n \n// form.addEventListener('submit', handlerSubmit);\n// function handlerSubmit(evt) {\n//   evt.preventDefault();\n\n//   const amount = Number(evt.currentTarget.elements.amount.value);\n//   const step = Number(evt.currentTarget.elements.step.value);\n//   const delay = Number(evt.currentTarget.elements.delay.value);\n\n//   for (let i = 1; i <= amount; i+=1) {\n// setTimeout(() => {\n\n//   createPromise(i,delay)\n//   .then(({ position, delay }) => {\n//     Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//   })\n//   .catch(({ position, delay }) => {\n//        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n// });\n//   delay += step;\n// },delay);\n// }\n// }\n\n\n// function createPromise(position, delay) {\n//   return new Promise((res,rej) => {\n\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//       res({ position, delay})\n//   }\n//   else {\n//     rej({position,delay})\n//   }\n// });\n// }"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$elem","form","document","querySelector","input_delay","input_step","input_amount","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","evt","preventDefault","delayValue","Number","value","stepValue","amountValue","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.5c2af519.js.map"}