{"mappings":"AA6CaA,SAASC,cAAc,SAE/BC,iBAAiB,UACtB,SAAuBC,G,kBAQvBC,YAAW,WAeX,IAAuBC,EAAUC,GAAVD,EAbPE,EAaiBD,EAbfE,EAcT,IAAIC,SAAQ,SAACC,EAAIC,GAEAC,KAAKC,SAAW,GAEpCH,EAAI,CAAEL,WAAUC,UAGlBK,EAAI,CAACN,WAASC,S,KApBfQ,MAAK,SAAAC,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MACjBU,OAAOC,QAAQ,uBAAwCC,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAE9Da,OAAM,SAAAJ,G,IAAGV,EAAQU,EAARV,SAAUC,EAAKS,EAALT,MACfU,OAAOI,QAAQ,sBAAqCF,OAAfb,EAAS,QAAYa,OAANZ,EAAM,M,IAE/DE,GAASa,C,GACTb,E,EAjBAL,EAAImB,iBAMJ,IAJA,IAAMC,EAASC,OAAOrB,EAAIsB,cAAcC,SAASH,OAAOI,OAClDN,EAAOG,OAAOrB,EAAIsB,cAAcC,SAASL,KAAKM,OAC9CnB,EAAQgB,OAAOrB,EAAIsB,cAAcC,SAASpB,MAAMqB,OAE7CC,EAAI,EAAGA,GAAKL,EAAQK,GAAG,EAACC,EAAAD,E","sources":["src/js/03-promises.js"],"sourcesContent":["// import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\n// const elem = {\n//   form: document.querySelector('.form'),\n//   input_delay: document.querySelector('input[name=\"delay\"]'),\n//   input_step: document.querySelector('input[name=\"step\"]'),\n//   input_amount: document.querySelector('input[name=\"amount\"]')\n// };\n\n// function createPromise(position, delay) {\n//   return new Promise((resolve, reject) => {\n//     setTimeout(() => {\n//     const shouldResolve = Math.random() > 0.3;\n//     if (shouldResolve) {\n//         resolve({ position, delay });\n//       } \n//       else {\n//         reject({ position, delay });\n//       }\n//     }, delay);\n//   });\n//  }\n\n\n//   elem.form.addEventListener('click', promiseCreate);\n// function promiseCreate(evt) {\n//   evt.preventDefault();\n\n//   let delayValue = Number(elem.input_delay.value);\n//   let stepValue = Number(elem.input_step.value);\n//   let amountValue = Number(elem.input_amount.value);\n\n//   for (let i = 1; i <= amountValue; i += 1) {\n\n//     createPromise(i, delayValue + stepValue * (i - 1))  \n//         .then(({ position, delay }) => {\n//         Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n//       })\n//       .catch(({ position, delay }) => {\n//         Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n//       });\n//   }\n// }\n\n\nconst form = document.querySelector('.form');\n \nform.addEventListener('submit', handlerSubmit);\nfunction handlerSubmit(evt) {\n  evt.preventDefault();\n\n  const amount = Number(evt.currentTarget.elements.amount.value);\n  const step = Number(evt.currentTarget.elements.step.value);\n  const delay = Number(evt.currentTarget.elements.delay.value);\n\n  for (let i = 1; i <= amount; i+=1) {\nsetTimeout(() => {\n\n  createPromise(i,delay)\n  .then(({ position, delay }) => {\n    Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n       Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n});\n  delay += step;\n},delay);\n}\n}\n\n\nfunction createPromise(position, delay) {\n  return new Promise((res,rej) => {\n\n    const shouldResolve = Math.random() > 0.3;\n    if (shouldResolve) {\n      res({ position, delay})\n  }\n  else {\n    rej({position,delay})\n  }\n});\n}"],"names":["document","querySelector","addEventListener","evt","setTimeout","position","delay","i","delay1","Promise","res","rej","Math","random","then","param","Notify","success","concat","catch","failure","step","preventDefault","amount","Number","currentTarget","elements","value","i1","_loop"],"version":3,"file":"03-promises.e9fb0a32.js.map"}